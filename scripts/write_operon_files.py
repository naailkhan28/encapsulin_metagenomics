import pandas as pd
import json
import gzip
from tqdm import tqdm

operon_df = pd.read_csv("operon_df_filtered.csv")
indices = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for i in indices:
    operon_df[f"Pfam {i}"] = operon_df[f"Pfam {i}"].apply(eval)

with open("DBs/label_descriptions.json.gz", 'rb') as f:
    with gzip.GzipFile(fileobj=f, mode='rb') as gzip_file:
      labels_dict = json.load(gzip_file)

labels_dict["PF19821"] = "Phage capsid protein"
labels_dict["PF19307"] = "Phage capsid-like protein"
labels_dict['PF19289'] = "PmbA/TldA metallopeptidase C-terminal domain"
labels_dict['PF19290'] = "PmbA/TldA metallopeptidase central domain"
labels_dict['PF20211'] = "Family of unknown function (DUF6571)"
labels_dict['PF19782'] = "Family of unknown function (DUF6267)"
labels_dict['PF19343'] = "Family of unknown function (DUF5923)"
labels_dict['PF20036'] = "Major capsid protein 13-like"
labels_dict['PF18960'] = "Family of unknown function (DUF5702)"
labels_dict['PF18906'] = "Phage tail tube protein"
labels_dict['PF19753'] = "Family of unknown function (DUF6240)"

def get_label(pfam):
    try:
        return(labels_dict[pfam])
    except KeyError:
        return(None)

known_mgyps = ['MGYP000934677593', 'MGYP001166290498', 'MGYP001175774113', 'MGYP001495822029', 'MGYP003109671843', 'MGYP000674248133', 'MGYP001661260214', 
'MGYP001772895215', 'MGYP000488071151', 'MGYP000102431369', 'MGYP003636907381', 'MGYP001166782316', 'MGYP001806476706', 'MGYP000238960271', 'MGYP001627794273', 
'MGYP000389299366', 'MGYP003392391534', 'MGYP001809770021', 'MGYP001626159621', 'MGYP001772598765', 'MGYP003668355250', 'MGYP003361793332', 'MGYP001627025497', 
'MGYP000657903083', 'MGYP001372087536', 'MGYP001626153899', 'MGYP003333955921', 'MGYP000157145946', 'MGYP000369174624', 'MGYP003365459109', 'MGYP000383995054', 
'MGYP001508311700', 'MGYP001377298599', 'MGYP001627112497', 'MGYP003110657904', 'MGYP003365071608', 'MGYP001809836267', 'MGYP001245027200', 'MGYP001784225213', 
'MGYP003325516961', 'MGYP000215260709', 'MGYP000646691163', 'MGYP000631152961', 'MGYP000292815046', 'MGYP000377540521', 'MGYP000692187788', 'MGYP000458177489', 
'MGYP001388136034', 'MGYP001269526620', 'MGYP003365015307', 'MGYP003362106639', 'MGYP003288119359', 'MGYP001118532716', 'MGYP003614871855', 'MGYP000451269290', 
'MGYP001328062919', 'MGYP003302485682', 'MGYP000188877934', 'MGYP003598712058', 'MGYP001551909951', 'MGYP000906978198', 'MGYP000256924453', 'MGYP001468603712', 
'MGYP001772614567', 'MGYP001772626497', 'MGYP003289700650', 'MGYP003371163271', 'MGYP001305861203', 'MGYP003637047435', 'MGYP001394323177', 'MGYP000126911704', 
'MGYP003111894484', 'MGYP003584596180', 'MGYP000764163578', 'MGYP001806590860', 'MGYP001805856174', 'MGYP000336767234', 'MGYP001191932810', 'MGYP000361344589', 
'MGYP001772615312', 'MGYP003561695899', 'MGYP000271170847', 'MGYP003365006076', 'MGYP000634505699', 'MGYP001770687550', 'MGYP000005098346', 'MGYP003373247424', 
'MGYP000610414931', 'MGYP001809675765', 'MGYP001553392266', 'MGYP003365220014', 'MGYP003583420273', 'MGYP002875673093', 'MGYP003325425037', 'MGYP000432667684', 
'MGYP001189200863', 'MGYP003964778207', 'MGYP003332684113', 'MGYP001365287079', 'MGYP000284114529', 'MGYP000520525852', 'MGYP001772498014', 'MGYP000710572512', 
'MGYP003625121643', 'MGYP001235099818', 'MGYP001051553792', 'MGYP000130361336', 'MGYP001604870764', 'MGYP000616299448', 'MGYP003361980941', 'MGYP001806805357', 
'MGYP000421531091', 'MGYP000014413890', 'MGYP001793225276', 'MGYP003624183582', 'MGYP003370219555', 'MGYP001556476986', 'MGYP001806634088', 'MGYP003333389062', 
'MGYP001770651498', 'MGYP002732142711', 'MGYP001431681731', 'MGYP003108382713', 'MGYP003143336405', 'MGYP001414737684', 'MGYP001553646702', 'MGYP001626327972', 
'MGYP003118733393', 'MGYP000099485684', 'MGYP003629788083', 'MGYP000937350499', 'MGYP000303765274', 'MGYP000464535878', 'MGYP003276588014', 'MGYP000274412832', 
'MGYP001622861810', 'MGYP003384526964', 'MGYP003108509317', 'MGYP000907569931', 'MGYP001581572508', 'MGYP001770665372', 'MGYP001544515232', 'MGYP001627852876', 
'MGYP001805949054', 'MGYP003276472124', 'MGYP003365230747', 'MGYP000732010148', 'MGYP000702098687', 'MGYP003370124888', 'MGYP001474723470', 'MGYP001626144185', 
'MGYP000469965527', 'MGYP003703364957', 'MGYP000448240885', 'MGYP001809623593', 'MGYP003667212087', 'MGYP000947173517', 'MGYP001627778738', 'MGYP003289565808', 
'MGYP003624910605', 'MGYP001378052258', 'MGYP001626204566', 'MGYP003626152403', 'MGYP000507254597', 'MGYP003670114767', 'MGYP000914502379', 'MGYP000589872918', 
'MGYP000305901162', 'MGYP000403980963', 'MGYP003640371092', 'MGYP003288393345', 'MGYP001502388070', 'MGYP001201249070', 'MGYP001522116553', 'MGYP003109524960', 
'MGYP003362069973', 'MGYP000598759126', 'MGYP001573638360', 'MGYP001806181312', 'MGYP000930758271', 'MGYP001367169767', 'MGYP000630911641']

operon_df = operon_df.query("`Encapsulin MGYP` not in @known_mgyps")

for i in range(len(operon_df)):
    pfams = {}
    if i == 0  or  (i+1) % 200 == 0:
        print(f"Processing row {i+1} / {len(operon_df)}")

    mgyp = operon_df.iloc[i, :]["Encapsulin MGYP"]

    for j, pfam_set in enumerate(operon_df.iloc[i, 21:]):
        num = indices[j]
        pfams[num] = []
        pfams[num].extend(pfam_set)

    with open(f"operons/{mgyp}_{i}.txt", "w") as outfile:
        for number, pfams in pfams.items():
            outfile.write(f"_________{number}_________\n")
            for pfam in pfams:
                try:
                    label = get_label(pfam).encode("utf-8")
                except AttributeError:
                    label = ""
                outfile.write(f"{pfam} {label}\n")